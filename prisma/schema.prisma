// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String   @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  accounts      Account[]
  budgets       Budget[]
  settings      Settings?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Settings {
  id       String  @id @default(uuid()) // Unique identifier for each record
  currency String // Currency field
  userId   String @unique // User identifier, must be unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model
}


model Budget {
  id         String       @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  name       String
  currency   String
  transactions Transaction[]
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Category {
  id         String       @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  name       String
  icon       String
  type       String
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  amount      Float
  description String
  type        String
  date        DateTime

  budgetId    String
  budget      Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MonthHistory {
  id        String  @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  budgetId  String
  day       Int
  month     Int
  year      Int
  income    Float
  expense   Float

  @@unique([day, month, year, budgetId])
}

model YearHistory {
  id        String  @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  budgetId  String
  month     Int
  year      Int
  income    Float
  expense   Float

  @@unique([month, year, budgetId])
}

model Account {
  id                String   @id @default(uuid()) // Use uuid() for auto-generated UUIDs
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

